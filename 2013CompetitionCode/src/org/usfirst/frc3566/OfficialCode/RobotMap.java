// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc3566.OfficialCode;
    
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder.PIDSourceParameter;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.networktables.NetworkTable;
import java.util.Vector;
/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController pIDDriveTalon1;
    public static SpeedController pIDDriveTalon2;
    public static SpeedController pIDDriveTalon3;
    public static SpeedController pIDDriveTalon4;
    public static RobotDrive pIDDriveRobotDrive;
    public static Gyro pIDDriveGyro1;
    public static Encoder pIDDriveQuadRight;
    public static Encoder pIDDriveQuadLeft;
    public static SpeedController shooterShooterMotor;
    public static SpeedController shooterTopDeckMotor;
    public static SpeedController shooterHock;
    public static DigitalInput shooterHockOpen;
    public static DigitalInput shooterHockClose;
    public static SpeedController shooterScrewDrive;
    public static DigitalInput shooterFrisbeeLoaded;
    public static Gyro shooterShooterAngle;
    public static DigitalInput shooterfrisbeeisin;
    public static SpeedController pickerUperBeaterBarMotor;
    public static SpeedController pickerUperArm;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static NetworkTable server;
    public static void init() {
        server = NetworkTable.getTable("SmartDashboard");
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        pIDDriveTalon1 = new Talon(1, 1);
	LiveWindow.addActuator("PIDDrive", "Talon1", (Talon) pIDDriveTalon1);
        
        pIDDriveTalon2 = new Talon(1, 2);
	LiveWindow.addActuator("PIDDrive", "Talon2", (Talon) pIDDriveTalon2);
        
        pIDDriveTalon3 = new Talon(1, 3);
	LiveWindow.addActuator("PIDDrive", "Talon3", (Talon) pIDDriveTalon3);
        
        pIDDriveTalon4 = new Talon(1, 4);
	LiveWindow.addActuator("PIDDrive", "Talon4", (Talon) pIDDriveTalon4);
        
        pIDDriveRobotDrive = new RobotDrive(pIDDriveTalon1, pIDDriveTalon2,
              pIDDriveTalon3, pIDDriveTalon4);
	
        pIDDriveRobotDrive.setSafetyEnabled(false);
        pIDDriveRobotDrive.setExpiration(0.1);
        pIDDriveRobotDrive.setSensitivity(0.5);
        pIDDriveRobotDrive.setMaxOutput(1.0);
        pIDDriveRobotDrive.setInvertedMotor(RobotDrive.MotorType.kFrontLeft, true);
        pIDDriveRobotDrive.setInvertedMotor(RobotDrive.MotorType.kRearLeft, true);
        pIDDriveRobotDrive.setInvertedMotor(RobotDrive.MotorType.kFrontRight, true);
        pIDDriveRobotDrive.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);
        pIDDriveGyro1 = new Gyro(1, 1);
	LiveWindow.addSensor("PIDDrive", "Gyro 1", pIDDriveGyro1);
        pIDDriveGyro1.setSensitivity(1.25);
        pIDDriveQuadRight = new Encoder(1, 3, 1, 4, false, EncodingType.k4X);
	LiveWindow.addSensor("PIDDrive", "QuadRight", pIDDriveQuadRight);
        pIDDriveQuadRight.setDistancePerPulse(1.0);
        pIDDriveQuadRight.setPIDSourceParameter(PIDSourceParameter.kRate);
        pIDDriveQuadRight.start();
        pIDDriveQuadLeft = new Encoder(1, 1, 1, 2, false, EncodingType.k4X);
	LiveWindow.addSensor("PIDDrive", "QuadLeft", pIDDriveQuadLeft);
        pIDDriveQuadLeft.setDistancePerPulse(1.0);
        pIDDriveQuadLeft.setPIDSourceParameter(PIDSourceParameter.kRate);
        pIDDriveQuadLeft.start();
        shooterShooterMotor = new Jaguar(1, 5);
	LiveWindow.addActuator("Shooter", "ShooterMotor", (Jaguar) shooterShooterMotor);
        
        shooterTopDeckMotor = new Jaguar(1, 6);
	LiveWindow.addActuator("Shooter", "TopDeckMotor", (Jaguar) shooterTopDeckMotor);
        
        shooterHock = new Jaguar(1, 7);
	LiveWindow.addActuator("Shooter", "Hock", (Jaguar) shooterHock);
        
        shooterHockOpen = new DigitalInput(1, 6);
	LiveWindow.addSensor("Shooter", "HockOpen", shooterHockOpen);
        
        shooterHockClose = new DigitalInput(1, 7);
	LiveWindow.addSensor("Shooter", "HockClose", shooterHockClose);
        
        shooterScrewDrive = new Jaguar(1, 10);
	LiveWindow.addActuator("Shooter", "ScrewDrive", (Jaguar) shooterScrewDrive);
        
        shooterFrisbeeLoaded = new DigitalInput(1, 5);
	LiveWindow.addSensor("Shooter", "FrisbeeLoaded", shooterFrisbeeLoaded);
        
        shooterShooterAngle = new Gyro(1, 2);
	LiveWindow.addSensor("Shooter", "Shooter Angle", shooterShooterAngle);
        shooterShooterAngle.setSensitivity(1.25);
        shooterfrisbeeisin = new DigitalInput(1, 14);
	LiveWindow.addSensor("Shooter", "frisbeeisin", shooterfrisbeeisin);
        
        pickerUperBeaterBarMotor = new Victor(1, 9);
	LiveWindow.addActuator("PickerUper", "BeaterBarMotor", (Victor) pickerUperBeaterBarMotor);
        
        pickerUperArm = new Victor(1, 8);
	LiveWindow.addActuator("PickerUper", "Arm", (Victor) pickerUperArm);
        
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
