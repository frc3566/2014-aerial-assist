// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc3566.OfficialCode.subsystems;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.networktables.NetworkTable;
import org.usfirst.frc3566.OfficialCode.RobotMap;
import org.usfirst.frc3566.OfficialCode.commands.RunTank;
/**
 *
 */
public class PIDDrive extends PIDSubsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SpeedController talon1 = RobotMap.pIDDriveTalon1;
    SpeedController talon2 = RobotMap.pIDDriveTalon2;
    SpeedController talon3 = RobotMap.pIDDriveTalon3;
    SpeedController talon4 = RobotMap.pIDDriveTalon4;
    RobotDrive robotDrive = RobotMap.pIDDriveRobotDrive;
    Gyro gyro1 = RobotMap.pIDDriveGyro1;
    Encoder quadRight = RobotMap.pIDDriveQuadRight;
    Encoder quadLeft = RobotMap.pIDDriveQuadLeft;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    // Initialize your subsystem here
    NetworkTable server = NetworkTable.getTable("SmartDashboard");
    public PIDDrive() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        super("PIDDrive", 1.0, 0.0, 0.0);
        setAbsoluteTolerance(0.2);
        getPIDController().setContinuous(false);
        LiveWindow.addActuator("PIDDrive", "PIDSubsystem Controller", getPIDController());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        // Use these to get going:
        // setSetpoint() -  Sets where the PID controller should move the system
        //                  to
        // enable() - Enables the PID controller.
    }
    
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new RunTank());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    
    protected double returnPIDInput() {
        // Return your input value for the PID loop
        // e.g. a sensor, like a potentiometer:
        // yourPot.getAverageVoltage() / kYourMaxVoltage;
	
        return gyro1.getAngle();
    }
    
    protected void usePIDOutput(double output) {
        // Use output to drive your system, like a motor
        // e.g. yourMotor.set(output);
	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
        talon1.pidWrite(output);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
    }
    public void runtank(double s1,double s2){
        robotDrive.tankDrive(s1, s2);
    }
    public void runarcade(GenericHID JOY){
        robotDrive.arcadeDrive(JOY);
    }
    public double getGyro(){
        return gyro1.getAngle();
    }
    public void turnAngle(double ang){
        double i;
        i = gyro1.getAngle()+ang;
        if (ang>0){
            while (gyro1.getAngle()<i){
                robotDrive.arcadeDrive(0, 0.3);
            }
        } else{
            while (gyro1.getAngle()>i){
                robotDrive.arcadeDrive(0, -0.3);
            }
        }
        robotDrive.arcadeDrive(0, 0);
    }
    public void runDisForward(double dis){
        double i,j;
        i = quadLeft.getDistance()+dis;
        j = quadRight.getDistance()+dis;
        while (quadLeft.getDistance()<i){
            talon1.set(0.8);
            talon2.set(0.8);
        }
        talon1.set(0);
        talon2.set(0);
        while (quadRight.getDistance()<j){
            talon3.set(0.8);
            talon4.set(0.8);
        }
        talon3.set(0);
        talon4.set(0);
        
    }
    public double angle;
    public void setleft(double s){
        robotDrive.arcadeDrive(0, -s);
    }
    public void setright(double s){
        robotDrive.arcadeDrive(0, s);
    }
}
