// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc3566.OfficialCode.subsystems;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.SpeedController;
import org.usfirst.frc3566.OfficialCode.RobotMap;
import org.usfirst.frc3566.OfficialCode.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import org.usfirst.frc3566.OfficialCode.RobotConstants;
/**
 *
 */
public class El_Toro extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SpeedController leftArm = RobotMap.el_ToroLeftArm;
    SpeedController rightArm = RobotMap.el_ToroRightArm;
    SpeedController updownMotor = RobotMap.el_ToroUpdownMotor;
    DigitalInput upperCap = RobotMap.el_ToroUpperCap;
    DigitalInput lowerCap = RobotMap.el_ToroLowerCap;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    

    private static int upDownPosition = RobotConstants.EL_TORO_PARK;
    
    /**
     * let's number the El Toro positions from 0-2
     *  RobotConstants.EL_TORO_FULL_DOWN = all the way down
     *  RobotConstants.EL_TORO_PARK = parked up (within the airspace of the bot)
     *  RobotConstants.EL_TOR_FULL_UP = all the way up
     * @return current position of El Toro
     */
    public static int getUpDownPosition() {
        return upDownPosition;
    }
    
    public static void setUpDownPosition(int newPosition) {
        upDownPosition = newPosition;
    }
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    
    public void raise() {
        if (!atUpperLimit()) {
            updownMotor.set(RobotConstants.EL_TORO_RAISE_SPEED);
        }
    }
    
    public void lower() {
        if (!atLowerLimit()) {
            updownMotor.set(RobotConstants.EL_TORO_LOWER_SPEED);
        }
    }
    
    public void stop() {
        updownMotor.set(0);
    }
    
    public boolean atUpperLimit() {
        return upperCap.get() == RobotConstants.EL_TORO_UPPER_LIMIT_CLOSED;
    }
    
    public boolean atLowerLimit() {
        return lowerCap.get() == RobotConstants.EL_TORO_LOWER_LIMIT_CLOSED;
    }
    
    public void twirl(double speed) {
        leftArm.set(speed);
        rightArm.set(speed);
    }
    
    public void twirlInward() {
        twirl(RobotConstants.EL_TORO_TWIRL_INWARD_SPEED);
    }
    
    public void twirlOutward() {
        twirl(RobotConstants.EL_TORO_TWIRL_OUTWARD_SPEED);
    }
    
    public void stopTwirling() {
        twirl(0);
    }
}
