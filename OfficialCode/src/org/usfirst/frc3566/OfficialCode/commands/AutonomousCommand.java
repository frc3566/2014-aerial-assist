// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc3566.OfficialCode.commands;

import edu.wpi.first.wpilibj.command.CommandGroup;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc3566.OfficialCode.Robot;
import org.usfirst.frc3566.OfficialCode.RobotConstants;

/**
 * Autonomous code to shoot on the high goal.
 */
public class AutonomousCommand extends CommandGroup {

    private long startTime;

    public AutonomousCommand() {
        // Add Commands here:
        // e.g. addSequential(new Command1());
        //      addSequential(new Command2());
        // these will run in order.

        // To run multiple commands at the same time,
        // use addParallel()
        // e.g. addParallel(new Command1());
        //      addSequential(new Command2());
        // Command1 and Command2 will run in parallel.
        // A command group will require all of the subsystems that each member
        // would require.
        // e.g. if Command1 requires chassis, and Command2 requires arm,
        // a CommandGroup containing them would require both the chassis and the
        // arm.

        startTime = System.currentTimeMillis();

        // Are we looking at the hot goal
        if (Robot.vision.hotTarget()) {
            hotTarget();

            // ...otherwise, we're looking at the cold goal
        } else {
            coldTarget();
        }
    }

    /**
     * Pick up the second ball
     */
    private void pickUpSecondBall() {
        SmartDashboard.putString("Autonomous1", "Picking up Ball 2 at " + (System.currentTimeMillis() - startTime) + " milliseconds");
        addSequential(new TwirlElToroOutward());
        addSequential(new LowerElToro(RobotConstants.AUTONOMOUS_SPEED_TO_LOWER_EL_TORO, RobotConstants.AUTONOMOUS_TIME_TO_LOWER_EL_TORO));
        addSequential(new StopTwirlingElToro());
    }

    /**
     * Launch first the loaded ball and then load and launch the second ball in
     * quick succession
     */
    private void launchBothBalls() {
        SmartDashboard.putString("Autonomous2", "Firing ball 1 at " + (System.currentTimeMillis() - startTime) + "milliseconds");
        addSequential(new FireCatapult());
        SmartDashboard.putString("Autonomous3", "Loading ball 2 at " + (System.currentTimeMillis() - startTime) + "milliseconds");
        addSequential(new TwirlElToroOutward());
        addSequential(new RaiseElToro());
        addParallel(new StopTwirlingElToro());
        SmartDashboard.putString("Autonomous4", "Firing ball 2 at " + (System.currentTimeMillis() - startTime) + "milliseconds");
        addSequential(new FireCatapult());
    }

    /**
     * Drive the robot at the _cold_ goal (so we have time to get there) and
     * then fire both balls into (what should now be) the _hot_ goal.
     */
    private void hotTarget() {
        SmartDashboard.putString("Autonomous", "Starting HOT at " + (System.currentTimeMillis() - startTime) + " milliseconds");

        pickUpSecondBall();

        // drive _away_ from hot goal and _to_ the cold goal
        addSequential(new Drive(RobotConstants.AUTONOMOUS_SPEED_TO_DRIVE_AT_HOT_GOAL, RobotConstants.AUTONOMOUS_DISTANCE_TO_DRIVE_AT_HOT_GOAL, RobotConstants.AUTONOMOUS_SPEED_TO_ROTATE_IF_HOT_GOAL));
        /// FIXME: we could maybe use the vision system to detect when it becomes hot, assuming that the vision target is in view when we're that close
        addSequential(new Pause(RobotConstants.AUTONOMOUS_WAIT_FOR_HOT_GOAL_TO_BECOME_COLD));

        launchBothBalls();
    }

    /**
     * Drive the robot forward, wait a beat, then fire the ball. Assumes that
     * the catapult may not be fully wound, but fires from however far the
     * catapult _is_ wound.
     *
     * (The concern is that if we finish winding the catapult with the ball on
     * it, the El Toro elbow will knock the ball out of the cradle.)
     */
    private void coldTarget() {
        SmartDashboard.putString("Autonomous", "Starting COLD at " + (System.currentTimeMillis() - startTime) + " milliseconds");

        pickUpSecondBall();

        // drive straight at the cold goal and wait for it to become hot
        addSequential(new Drive(RobotConstants.AUTONOMOUS_SPEED_TO_DRIVE_AT_COLD_GOAL, RobotConstants.AUTONOMOUS_DISTANCE_TO_DRIVE_AT_COLD_GOAL));
        /// FIXME: we could maybe use the vision system to detect when it becomes hot, assuming that the vision target is in view when we're that close
        addSequential(new Pause(RobotConstants.AUTONOMOUS_WAIT_FOR_COLD_GOAL_TO_BECOME_HOT));

        launchBothBalls();
    }
}
