// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc3566.OfficialCode;
import org.usfirst.frc3566.OfficialCode.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.*;
/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // Another type of button you can create is a DigitalIOButton, which is
    // a button or switch hooked up to the cypress module. These are useful if
    // you want to build a customized operator interface.
    // Button button = new DigitalIOButton(1);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public Joystick rightJoy;
    public Joystick leftJoy;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        leftJoy = new Joystick(2);
        
        rightJoy = new Joystick(1);
        
	    
        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("Mecanum Drive", new MecanumDrive());
        SmartDashboard.putData("GoTo", new GoTo());
        SmartDashboard.putData("Drive", new Drive());
        SmartDashboard.putData("Engage Dogbox", new EngageDogbox());
        SmartDashboard.putData("Disengage Dogbox", new DisengageDogbox());
        SmartDashboard.putData("Wind Winch", new WindWinch());
        SmartDashboard.putData("Fire Catapult", new FireCatapult());
        SmartDashboard.putData("Prepare Catapult", new PrepareCatapult());
        SmartDashboard.putData("Lower El Toro", new LowerElToro());
        SmartDashboard.putData("Raise El Toro", new RaiseElToro());
        SmartDashboard.putData("Vomit Ball", new VomitBall());
        SmartDashboard.putData("Stop Twirling El Toro", new StopTwirlingElToro());
        SmartDashboard.putData("Twirl El Toro Inward", new TwirlElToroInward());
        SmartDashboard.putData("Twirl El Toro Outward", new TwirlElToroOutward());
        SmartDashboard.putData("Pause For Distance", new PauseForDistance());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        SmartDashboard.putData("Left Front Encoder", RobotMap.driveTrainLeftFrontEncoder);
        SmartDashboard.putData("Ultrasonic", RobotMap.driveTrainUltrasonic);
        SmartDashboard.putData("El Toro Lower Limit", RobotMap.elToroLowerLimit);
        SmartDashboard.putData("El Toro Upper Limit", RobotMap.elToroUpperLimit);
        SmartDashboard.putData("Catapult Ready Limit", RobotMap.catapultCatapultReadyLimit);
        SmartDashboard.putData("Dogbox Engaged Limit", RobotMap.dogboxEngagedLimit);
    }
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getRightJoy() {
        return rightJoy;
    }
    public Joystick getLeftJoy() {
        return leftJoy;
    }
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}
