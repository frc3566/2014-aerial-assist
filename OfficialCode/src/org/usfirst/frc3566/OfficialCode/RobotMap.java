// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc3566.OfficialCode;
    
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType; import edu.wpi.first.wpilibj.PIDSource.PIDSourceParameter;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import java.util.Vector;
/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController driveTrainLeftFront;
    public static SpeedController driveTrainLeftRear;
    public static SpeedController driveTrainRightFront;
    public static SpeedController driveTrainRightRear;
    public static RobotDrive driveTrainMecanum;
    public static Encoder driveTrainLeftFrontEncoder;
    public static Ultrasonic driveTrainUltrasonic;
    public static SpeedController elToroLeftArm;
    public static SpeedController elToroRightArm;
    public static SpeedController elToroElevator;
    public static DigitalInput elToroUpperLimit;
    public static DigitalInput elToroLowerLimit;
    public static SpeedController catapultWinchMotor;
    public static DigitalInput catapultCatapultReadyLimit;
    public static DigitalInput dogboxEngagedLimit;
    public static SpeedController dogboxClutch;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainLeftFront = new Talon(1, 1);
	LiveWindow.addActuator("DriveTrain", "LeftFront", (Talon) driveTrainLeftFront);
        
        driveTrainLeftRear = new Talon(1, 2);
	LiveWindow.addActuator("DriveTrain", "LeftRear", (Talon) driveTrainLeftRear);
        
        driveTrainRightFront = new Talon(1, 3);
	LiveWindow.addActuator("DriveTrain", "RightFront", (Talon) driveTrainRightFront);
        
        driveTrainRightRear = new Talon(1, 4);
	LiveWindow.addActuator("DriveTrain", "RightRear", (Talon) driveTrainRightRear);
        
        driveTrainMecanum = new RobotDrive(driveTrainLeftFront, driveTrainLeftRear,
              driveTrainRightFront, driveTrainRightRear);
	
        driveTrainMecanum.setSafetyEnabled(true);
        driveTrainMecanum.setExpiration(0.1);
        driveTrainMecanum.setSensitivity(0.5);
        driveTrainMecanum.setMaxOutput(1.0);
        driveTrainMecanum.setInvertedMotor(RobotDrive.MotorType.kFrontRight, true);
        driveTrainMecanum.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);
        driveTrainLeftFrontEncoder = new Encoder(1, 1, 1, 2, false, EncodingType.k4X);
	LiveWindow.addSensor("DriveTrain", "LeftFrontEncoder", driveTrainLeftFrontEncoder);
        driveTrainLeftFrontEncoder.setDistancePerPulse(1.0);
        driveTrainLeftFrontEncoder.setPIDSourceParameter(PIDSourceParameter.kRate);
        driveTrainLeftFrontEncoder.start();
        driveTrainUltrasonic = new Ultrasonic(1, 11, 1, 12);
	LiveWindow.addSensor("DriveTrain", "Ultrasonic", driveTrainUltrasonic);
        
        elToroLeftArm = new Talon(1, 5);
	LiveWindow.addActuator("El Toro", "Left Arm", (Talon) elToroLeftArm);
        
        elToroRightArm = new Talon(1, 6);
	LiveWindow.addActuator("El Toro", "Right Arm", (Talon) elToroRightArm);
        
        elToroElevator = new Talon(1, 7);
	LiveWindow.addActuator("El Toro", "Elevator", (Talon) elToroElevator);
        
        elToroUpperLimit = new DigitalInput(1, 10);
	LiveWindow.addSensor("El Toro", "Upper Limit", elToroUpperLimit);
        
        elToroLowerLimit = new DigitalInput(1, 9);
	LiveWindow.addSensor("El Toro", "Lower Limit", elToroLowerLimit);
        
        catapultWinchMotor = new Talon(1, 8);
	LiveWindow.addActuator("Catapult", "Winch Motor", (Talon) catapultWinchMotor);
        
        catapultCatapultReadyLimit = new DigitalInput(1, 14);
	LiveWindow.addSensor("Catapult", "Catapult Ready Limit", catapultCatapultReadyLimit);
        
        dogboxEngagedLimit = new DigitalInput(1, 3);
	LiveWindow.addSensor("Dogbox", "Engaged Limit", dogboxEngagedLimit);
        
        dogboxClutch = new Talon(1, 9);
	LiveWindow.addActuator("Dogbox", "Clutch", (Talon) dogboxClutch);
        
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
